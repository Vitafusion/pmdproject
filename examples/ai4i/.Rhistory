else
next
}
vec
vec = matrix(0,nrow=25,ncol=mm)
vec
for(i in 1:nnt){
l.vec = l.vec.compute(i, cn.vec, m)
t=0
count=0
for(j in 1:(m-1)){
vec[i,j]=l.vec[j]-1
}
if(sum(vec[i,])<mm)
vec[i,mm] = mm - sum(vec[i,])
else
vec[i,] = rep(0,mm)
}
vec
for(i in 1:nnt){
l.vec = l.vec.compute(i, cn.vec, m)
t=0
count=0
for(j in 1:(m-1)){
vec[i,j]=l.vec[j]-1
}
if(sum(vec[i,])<mm)
vec[i,mm] = mm - sum(vec[i,])
else
#vec[i,] = rep(0,mm)
}
for(i in 1:nnt){
l.vec = l.vec.compute(i, cn.vec, m)
t=0
count=0
for(j in 1:(m-1)){
vec[i,j]=l.vec[j]-1
}
if(sum(vec[i,])<mm)
vec[i,mm] = mm - sum(vec[i,])
#vec[i,] = rep(0,mm)
}
vec
vec = matrix(0,nrow=25,ncol=mm)
for(i in 1:nnt){
l.vec = l.vec.compute(i, cn.vec, m)
t=0
count=0
for(j in 1:(m-1)){
vec[i,j]=l.vec[j]-1
}
if(sum(vec[i,])>mm)
next
else
vec[i,mm] = mm - sum(vec[i,])
}
vec
for(i in 1:nnt){
l.vec = l.vec.compute(i, cn.vec, m)
t=0
count=0
for(j in 1:(m-1)){
vec[i,j]=l.vec[j]-1
}
if(sum(vec[i,])>mm)
vec = vec[-i,]
else
vec[i,mm] = mm - sum(vec[i,])
}
l.vec
l.vec+1
l.vec-1
vec[i,j]
vec = matrix(0,nrow=25,ncol=mm)
for(i in 1:30){
l.vec = l.vec.compute(i, cn.vec, m)
for(j in 1:(m-1)){
if(sum(l.vec-1)>m)
break
else
vec[i,j]=l.vec[j]-1
}
vec[i,mm] = mm - sum(vec[i,])
}
i
vec = matrix(0,nrow=30,ncol=mm)
for(i in 1:30){
l.vec = l.vec.compute(i, cn.vec, m)
for(j in 1:(m-1)){
if(sum(l.vec-1)>m)
break
else
vec[i,j]=l.vec[j]-1
}
vec[i,mm] = mm - sum(vec[i,])
}
vec
vec = matrix(0,nrow=30,ncol=mm)
for(i in 1:30){
l.vec = l.vec.compute(i, cn.vec, m)
for(j in 1:(m-1)){
if(sum(l.vec-1)>m)
break
else
vec[i,j]=l.vec[j]-1
vec[i,mm] = mm - sum(vec[i,])
}
}
vec
vec = matrix(0,nrow=30,ncol=mm)
for(i in 1:30){
l.vec = l.vec.compute(i, cn.vec, m)
for(j in 1:(m-1)){
if(sum(l.vec-1)>m)
break
else
vec[i,j]=l.vec[j]-1
vec[i,mm] = mm - sum(l.vec-1)
}
}
vec
nn=200
mm=10
nn.vec=rep(nn+1, mm-1)
l.vec=rep(0, mm-1)
cn.vec=cumprod(nn.vec)
cn.vec=c(1, cn.vec[-(mm-1)])
cn.vec=cn.vec[length(cn.vec):1]
cn.vec=as.integer(cn.vec)
nn=100
nn.vec=rep(nn+1, mm-1)
l.vec=rep(0, mm-1)
cn.vec=cumprod(nn.vec)
cn.vec=c(1, cn.vec[-(mm-1)])
cn.vec=cn.vec[length(cn.vec):1]
cn.vec=as.integer(cn.vec)
cn.vec
cn.vec
nn=50
nn.vec=rep(nn+1, mm-1)
l.vec=rep(0, mm-1)
cn.vec=cumprod(nn.vec)
cn.vec=c(1, cn.vec[-(mm-1)])
cn.vec=cn.vec[length(cn.vec):1]
cn.vec=as.integer(cn.vec)
cn.vec
2^10
2^32
log(2^32)
log100(2^32)
log20(2^32)
log10(2^32)
log10(2^32)
sample.int(c(10,20))
sample.int(2,c(10,20))
sample.int(10,1)
sample.int(10,1)
sample.int(10,1)
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1)
vec[i,j] == sample.int(mm,1)
else
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
i
j
if(j==1)
vec[i,j] == sample.int(mm,1)
if(j==1)
vec[i,j] == sample.int(mm,1)
j
if(j==1)
vec[i,j] == sample.int(mm,1)
else
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
s = 0
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
vec
j==1
j
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
vec
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
vec
j
j=1
i=1
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
mm
mm=3
nn
nn=10
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((nn-s),1)
}
}
}
nn-s
j
i
vec
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((nn-s),1)
}
}
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(,1)
}
}
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(s,1)
}
}
}
vec
simul_vec = function(n=1000,mm){
vec = matrix(0,nrow=100,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(s,1)
}
}
}
return(vec)
}
t = simul_vec(mm=3)
simul_vec = function(n=100,mm){
vec = matrix(0,nrow=n,ncol=mm)
for (i in 1:n) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(s,1)
}
}
}
return(vec)
}
t = simul_vec(m=3)
t = simul_vec(n=1000,m=5)
head(t)
pp <- pmatrix(1,m[i])
###################################################
rep <- c(10^5,10^6,10^7)
#n <- c(10,20,40,60,70,80,90,99)
#m <- c(5,6,7,8,10)
n = c(10,20,30,40,50)
m = c(10,12,14,16,18,20)
N <- length(n)
M <- length(m)
K <- length(rep)
K*M*N
rep <- c(10^5,10^6,10^7)
#n <- c(10,20,40,60,70,80,90,99)
#m <- c(5,6,7,8,10)
n = c(10,20,30,40,50)
m = c(10,12,14,16,18,20)
N <- length(n)
M <- length(m)
K <- length(rep)
results <- matrix(0,nrow = K*M*N ,ncol = 4)
results <- as.data.frame(results)
colnames(results) <- c("(n,m)","(p_min,p_max)","R","MAE")
for (i in 1:N) {
for(j in 1:M){
pp <- pmatrix(1,m[i])
mm = ncol(pp)
nn = n[i]
x_vec = simul_vec(n=100,m=mm)
for (kk in 1:K) {
results$`(p_min,p_max)`[(i-1)*K*M+(j-1)*K + kk] <- paste0("(",round(min(pp),2),",",round(max(pp),2),")")
results$`(n,m)`[(i-1)*K*M+(j-1)*K + kk] <-  paste0("(",n[i],",",m[j],")")
results$R[(i-1)*K*M + (j-1)*K + kk] <- rep[kk]
res0 = as.double(c(0))
res1 = 0
t = rep[k]
}
}
}
View(results)
rep <- c(10^5,10^6,10^7)
#n <- c(10,20,40,60,70,80,90,99)
#m <- c(5,6,7,8,10)
n = c(10,20,30,40,50)
m = c(10,12,14,16,18,20)
N <- length(n)
M <- length(m)
K <- length(rep)
results <- matrix(0,nrow = K*M*N ,ncol = 4)
results <- as.data.frame(results)
colnames(results) <- c("(n,m)","(p_min,p_max)","R","MAE")
for (i in 1:N) {
for(j in 1:M){
pp <- pmatrix(1,m[i])
mm = ncol(pp)
nn = n[i]
x_vec = simul_vec(n=100,m=mm)
for (kk in 1:K) {
results$`(p_min,p_max)`[(i-1)*K*M+(j-1)*K + kk] <- paste0("(",round(min(pp),2),",",round(max(pp),2),")")
results$`(n,m)`[(i-1)*K*M+(j-1)*K + kk] <-  paste0("(",n[j],",",m[i],")")
results$R[(i-1)*K*M + (j-1)*K + kk] <- rep[kk]
res0 = as.double(c(0))
res1 = 0
t = rep[k]
}
}
}
View(results)
11^19
log2(5^20)
log2(5^15)
log2(5^14)
log2(5^12)
rm(list=ls())
data(iris)
data(iris)
iris
View(iris)
print("m=8")
write.csv(results,"m=5_t=10^4_r=100.csv")
res_normal=double(0)
res_normal
res_normal = c("@2")
res_normal
144/24
#data prepare
ai4i = ai4i.prep()
source("/home/zhengzhi/functions/myfunctions.R")
dyn.load("/home/zhengzhi/functions/functions.so")
setwd("C:/Users/linzh/Desktop/pmd/examples/ai4i")
source("C:/Users/linzh/Desktop/pmd/functions/myfunctions.R")
#data prepare
ai4i = ai4i.prep()
out = make.data.equal.groups(ai4i,1000,category_name = c('H','L','M'),category_column = 'Type')
groups = out[[1]]
10000、50
10000/50
out = make.data.equal.groups(ai4i,200,category_name = c('H','L','M'),category_column = 'Type')
groups = out[[1]]
out = make.data.equal.groups(ai4i,1000,category_name = c('H','L','M'),category_column = 'Type')
groups = out[[1]]
out = make.data.equal.groups(ai4i,500,category_name = c('H','L','M'),category_column = 'Type')
groups = out[[1]]
3713.694931-3713.694859
setwd("C:/Users/linzh/Desktop/pmd/examples/simulate data")
library(dplyr)
library(tidyr)
dat = read.table(file = 'beta.txt',sep = ',')
beta = matrix(NA,nrow=1000,ncol=4)
j = 1
for(i in 1:nrow(dat)){
temp = strsplit(dat[i,],' ')[[1]][1]
if(temp=='[1]')
{  beta[j,] = as.numeric(strsplit(dat[i,],' ')[[1]][2:5])
j = j+1
}
}
hist(beta[,1])
hist(beta[,2])
hist(beta[,1])
hist(beta[,2])
hist(beta[,3])
hist(beta[,4])
setwd("C:/Users/linzh/Desktop/pmd/examples/driver")
driver = load.driver()
source("C:/Users/linzh/Desktop/pmd/functions/myfunctions.R")
driver = load.driver()
setwd("C:/Users/linzh/Desktop/pmd/examples/ai4i")
source("C:/Users/linzh/Desktop/pmd/functions/myfunctions.R")
#data prepare
ai4i = ai4i.prep()
set.seed(10000)
ai4i = ai4i[1:1000,]
out = make.data.groups(ai4i,1000,category_name = c('H','L','M'),category_column = 'Type')
groups = out[[1]]
ai4i = ai4i[1:1000,]
#data prepare
ai4i = ai4i.prep()
set.seed(10000)
ai4i = ai4i[1:1000,]
out = make.data.groups(ai4i,100,category_name = c('H','L','M'),category_column = 'Type')
groups = out[[1]]
count_result = out[[2]]
category_number = 3
View(ai4i)
setwd("C:/Users/linzh/Desktop/pmd/examples/ai4i")
#data prepare
ai4i = ai4i.prep()
set.seed(10000)
out = make.data.groups(ai4i,200,category_name = c('H','L','M'),category_column = 'Type')
groups = out[[1]]
count_result = out[[2]]
category_number = 3
