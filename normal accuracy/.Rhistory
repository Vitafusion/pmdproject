else
vec[i,j]=l.vec[j]-1
}
vec[i,mm] = mm - sum(vec[i,])
}
vec
vec = matrix(0,nrow=30,ncol=mm)
for(i in 1:30){
l.vec = l.vec.compute(i, cn.vec, m)
for(j in 1:(m-1)){
if(sum(l.vec-1)>m)
break
else
vec[i,j]=l.vec[j]-1
vec[i,mm] = mm - sum(vec[i,])
}
}
vec
vec = matrix(0,nrow=30,ncol=mm)
for(i in 1:30){
l.vec = l.vec.compute(i, cn.vec, m)
for(j in 1:(m-1)){
if(sum(l.vec-1)>m)
break
else
vec[i,j]=l.vec[j]-1
vec[i,mm] = mm - sum(l.vec-1)
}
}
vec
nn=200
mm=10
nn.vec=rep(nn+1, mm-1)
l.vec=rep(0, mm-1)
cn.vec=cumprod(nn.vec)
cn.vec=c(1, cn.vec[-(mm-1)])
cn.vec=cn.vec[length(cn.vec):1]
cn.vec=as.integer(cn.vec)
nn=100
nn.vec=rep(nn+1, mm-1)
l.vec=rep(0, mm-1)
cn.vec=cumprod(nn.vec)
cn.vec=c(1, cn.vec[-(mm-1)])
cn.vec=cn.vec[length(cn.vec):1]
cn.vec=as.integer(cn.vec)
cn.vec
cn.vec
nn=50
nn.vec=rep(nn+1, mm-1)
l.vec=rep(0, mm-1)
cn.vec=cumprod(nn.vec)
cn.vec=c(1, cn.vec[-(mm-1)])
cn.vec=cn.vec[length(cn.vec):1]
cn.vec=as.integer(cn.vec)
cn.vec
2^10
2^32
log(2^32)
log100(2^32)
log20(2^32)
log10(2^32)
log10(2^32)
sample.int(c(10,20))
sample.int(2,c(10,20))
sample.int(10,1)
sample.int(10,1)
sample.int(10,1)
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1)
vec[i,j] == sample.int(mm,1)
else
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
i
j
if(j==1)
vec[i,j] == sample.int(mm,1)
if(j==1)
vec[i,j] == sample.int(mm,1)
j
if(j==1)
vec[i,j] == sample.int(mm,1)
else
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
s = 0
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
vec
j==1
j
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
vec
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
vec
j
j=1
i=1
if(j==1){
vec[i,j] == sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(mm,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((mm-s),1)
}
}
}
mm
mm=3
nn
nn=10
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((nn-s),1)
}
}
}
nn-s
j
i
vec
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = sum(vec[i,1:(j-1)])
vec[i,j] == sample.int((nn-s),1)
}
}
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(,1)
}
}
}
vec = matrix(0,nrow=10,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(s,1)
}
}
}
vec
simul_vec = function(n=1000,mm){
vec = matrix(0,nrow=100,ncol=mm)
for (i in 1:10) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(s,1)
}
}
}
return(vec)
}
t = simul_vec(mm=3)
simul_vec = function(n=100,mm){
vec = matrix(0,nrow=n,ncol=mm)
for (i in 1:n) {
for (j in 1:mm) {
if(j==1){
vec[i,j] = sample.int(nn,1)
}
else{
s = nn - sum(vec[i,1:(j-1)])
if(s==0) vec[i,j]=s
else vec[i,j] = sample.int(s,1)
}
}
}
return(vec)
}
t = simul_vec(m=3)
t = simul_vec(n=1000,m=5)
head(t)
pp <- pmatrix(1,m[i])
###################################################
rep <- c(10^5,10^6,10^7)
#n <- c(10,20,40,60,70,80,90,99)
#m <- c(5,6,7,8,10)
n = c(10,20,30,40,50)
m = c(10,12,14,16,18,20)
N <- length(n)
M <- length(m)
K <- length(rep)
K*M*N
rep <- c(10^5,10^6,10^7)
#n <- c(10,20,40,60,70,80,90,99)
#m <- c(5,6,7,8,10)
n = c(10,20,30,40,50)
m = c(10,12,14,16,18,20)
N <- length(n)
M <- length(m)
K <- length(rep)
results <- matrix(0,nrow = K*M*N ,ncol = 4)
results <- as.data.frame(results)
colnames(results) <- c("(n,m)","(p_min,p_max)","R","MAE")
for (i in 1:N) {
for(j in 1:M){
pp <- pmatrix(1,m[i])
mm = ncol(pp)
nn = n[i]
x_vec = simul_vec(n=100,m=mm)
for (kk in 1:K) {
results$`(p_min,p_max)`[(i-1)*K*M+(j-1)*K + kk] <- paste0("(",round(min(pp),2),",",round(max(pp),2),")")
results$`(n,m)`[(i-1)*K*M+(j-1)*K + kk] <-  paste0("(",n[i],",",m[j],")")
results$R[(i-1)*K*M + (j-1)*K + kk] <- rep[kk]
res0 = as.double(c(0))
res1 = 0
t = rep[k]
}
}
}
View(results)
rep <- c(10^5,10^6,10^7)
#n <- c(10,20,40,60,70,80,90,99)
#m <- c(5,6,7,8,10)
n = c(10,20,30,40,50)
m = c(10,12,14,16,18,20)
N <- length(n)
M <- length(m)
K <- length(rep)
results <- matrix(0,nrow = K*M*N ,ncol = 4)
results <- as.data.frame(results)
colnames(results) <- c("(n,m)","(p_min,p_max)","R","MAE")
for (i in 1:N) {
for(j in 1:M){
pp <- pmatrix(1,m[i])
mm = ncol(pp)
nn = n[i]
x_vec = simul_vec(n=100,m=mm)
for (kk in 1:K) {
results$`(p_min,p_max)`[(i-1)*K*M+(j-1)*K + kk] <- paste0("(",round(min(pp),2),",",round(max(pp),2),")")
results$`(n,m)`[(i-1)*K*M+(j-1)*K + kk] <-  paste0("(",n[j],",",m[i],")")
results$R[(i-1)*K*M + (j-1)*K + kk] <- rep[kk]
res0 = as.double(c(0))
res1 = 0
t = rep[k]
}
}
}
View(results)
11^19
log2(5^20)
log2(5^15)
log2(5^14)
log2(5^12)
rm(list=ls())
data(iris)
data(iris)
iris
View(iris)
print("m=8")
2^(31/19)
31/(log2(11))
setwd("C:/Users/linzh/Application Data/SSH/temp")
rm(list=ls(
))
setwd("C:/Users/linzh/Desktop/pmd/normal accuracy")
t = read.table('slurm-70334-m=8.out')
t = read.table('slurm-70334-m=8.out',sep = ' ')
t = read.table('slurm-70334-m=8.out',sep = '')
dir()
read.table("slurm-70168-m=7.out", header = FALSE, sep = "", dec = ".")
read.table("slurm-70168-m=7.out", header = FALSE)
read.table("slurm-70168-m=7.out.txt", header = FALSE)
read.table("slurm-70168-m=7.out", header = FALSE)
read.table("m=7", header = FALSE)
read.table("m=7.txt", header = FALSE)
read.table("slurm-70168-m=7.out", header = FALSE)
read.table("m=7.txt", header = FALSE)
m7 = read.table("m=7.txt", header = FALSE)
View(m7)
even_indexes<-seq(2,50,2)
m7 = m7[-even_indexes,]
View(m7)
m7 = as.data.frame(m7)
colnames(m7) = c('n','(p_min,p_max)','MAE','TAE')
View(m7)
plot(x = m7$n,y=m7$MAE,)
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(c(1,1))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(c(2,2))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(mar=c(1, 1))
par(mar=c(2, 2))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(c(2, 2))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(mfrow = c(2, 2))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(mfrow = c(1, 1))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(mfrow = c(1, 1))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(mfrow = c(2, 1))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
par(mfrow = c(1, 2))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
m8 = read.table('m=8.txt')
View(m8)
m8 = read.table('m=8.txt')
even_indexes = seq(2,28,2)
m8 = m8[-even_indexes,]
m8 = as.data.frame(m8)
colnames(m8) = c('n','(p_min,p_max)','MAE','TAE')
View(m8)
par(mfrow = c(2, 2))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
plot(x = m8$n,y=m8$MAE,type = 'l')
plot(x = m8$n,y=m8$TAE,type = 'l')
m6 = read.table('m=6.txt')
m6 = read.table('m=6.txt')
View(m6)
m6 = m6[,-1]
View(m6)
m6 = read.table('m=6.txt')
m6 = m6[,-1]
m6 = as.data.frame(m6)
colnames(m6) = c('n','(p_min,p_max)','MAE','TAE')
View(m6)
m6 = m6[-1,]
plot(x = m6$n,y=m6$MAE,type = 'l')
plot(x = m6$n,y=m6$TAE,type = 'l')
m5 = read.table('m=5.txt')
m5 = m5[,-1]
m5 = as.data.frame(m5)
colnames(m5) = c('n','(p_min,p_max)','MAE','TAE')
plot(x = m5$n,y=m5$MAE,type = 'l')
plot(x = m5$n,y=m5$TAE,type = 'l')
m4 = read.table('m=4.txt')
View(m4)
m4 = read.table('m=4.txt',sep = ' ')
m4 = read.table('m=4.txt',sep = ',')
View(m4)
m4 = m4[,-1]
m4 = as.data.frame(m4)
colnames(m4) = c('n','(p_min,p_max)','MAE','TAE')
plot(x = m4$n,y=m4$MAE,type = 'l')
plot(x = m4$n,y=m4$TAE,type = 'l')
m3 = read.table('m=3.txt',sep = ',')
m3 = m3[,-1]
m3 = as.data.frame(m3)
colnames(m3) = c('n','(p_min,p_max)','MAE','TAE')
plot(x = m3$n,y=m3$MAE,type = 'l')
plot(x = m3$n,y=m3$TAE,type = 'l')
setwd("C:/Users/linzh/Desktop/pmd/simulation_accuracy")
m3 = read.table('m=3.txt',sep = ',')
m3 = read.table('m3.txt',sep = ',')
m3 = m3[,-1]
m3 = as.data.frame(m3)
colnames(m3) = c('n','(p_min,p_max)','MAE','TAE')
par(mfrow = c(2, 2))
plot(x = m3$n,y=m3$MAE,type = 'l')
plot(x = m3$n,y=m3$TAE,type = 'l')
m4 = read.table('m4.txt')
m4 = m4[,-1]
m4 = as.data.frame(m4)
colnames(m4) = c('n','(p_min,p_max)','MAE','TAE')
View(m4)
par(mfrow = c(2, 2))
plot(x = m3$n,y=m3$MAE,type = 'l')
plot(x = m3$n,y=m3$TAE,type = 'l')
plot(x = m4$n,y=m4$MAE,type = 'l')
plot(x = m4$n,y=m4$TAE,type = 'l')
setwd("C:/Users/linzh/Desktop/pmd/normal accuracy")
m7 = read.table("m=7.txt", header = FALSE)
even_indexes<-seq(2,50,2)
m7 = m7[-even_indexes,]
m7 = as.data.frame(m7)
colnames(m7) = c('n','(p_min,p_max)','MAE','TAE')
m8 = read.table('m=8.txt')
even_indexes = seq(2,28,2)
m8 = m8[-even_indexes,]
m8 = as.data.frame(m8)
colnames(m8) = c('n','(p_min,p_max)','MAE','TAE')
m6 = read.table('m=6.txt')
m6 = m6[,-1]
m6 = m6[-1,]
colnames(m6) = c('n','(p_min,p_max)','MAE','TAE')
m6 = as.data.frame(m6)
m5 = read.table('m=5.txt')
m5 = m5[,-1]
m5 = as.data.frame(m5)
colnames(m5) = c('n','(p_min,p_max)','MAE','TAE')
m4 = read.table('m=4.txt',sep = ',')
m4 = m4[,-1]
m4 = as.data.frame(m4)
colnames(m4) = c('n','(p_min,p_max)','MAE','TAE')
m3 = read.table('m=3.txt',sep = ',')
m3 = m3[,-1]
m3 = as.data.frame(m3)
colnames(m3) = c('n','(p_min,p_max)','MAE','TAE')
par(mfrow = c(2, 2))
plot(x = m7$n,y=m7$MAE,type = 'l')
plot(x = m7$n,y=m7$TAE,type = 'l')
plot(x = m8$n,y=m8$MAE,type = 'l')
plot(x = m8$n,y=m8$TAE,type = 'l')
lines(x=m8$n,y=m8$MAE)
par(mfrow = c(2, 2))
plot(x = m7$n,y=m7$MAE,type = 'l')
lines(x=m8$n,y=m8$MAE)
lines(x=m8$n,y=m8$MAE,col= 'r')
lines(x=m8$n,y=m8$MAE,col = 'red')
install.packages("Rcpp")
library(Rcpp)
