group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
for (i in 1:groups_number) {
group[[i]] = dat[ss==i,]
expr = paste(categor_column)
out[i,1] = nrow(group[[i]][which(group[[i]][,expr]==category_name[1]),])
out[i,2] = nrow(group[[i]][which(group[[i]][,expr]==category_name[2]),])
out[i,3] = nrow(group[[i]][which(group[[i]][,expr]==category_name[3]),])
}
return(list(group,out))
}
compute_l.vec = function(result){
m = length(result)
res = result[1:(m-1)]
l.vec = rep(0,m-1)
for (i in 1:(m-1)) {
l.vec[i] = as.numeric(res[i]) + 1
}
return(l.vec)
}
l.vec.compute=function(k, cn.vec, m)
{
k=k-1
l.vec=rep(0, m-1)
for(i in 1:(m-1))
{
aa=k%%cn.vec[i]
bb=(k-aa)/cn.vec[i]
l.vec[i]=bb
k=aa
}
l.vec=l.vec+1
return(l.vec)
}
pmatrix <- function(n,m){
p <- matrix(0,nrow = n,ncol = m,byrow = T)
for (i in 1:n) {
r <- runif(m)
r <- r/sum(r) #generate row
p[i,] <- r
}
return(p)
}
res = make.data.equal.groups(iris,10)
res
groups = res[[1]]
groups
count_result = res[[2]]
count_result
i=1
j=1
parm=rep(0.1,4*2)
n = ncol(x_mat)
m = category_number
parm = matrix(parm,n,m-1)
parm
P = matrix(0, nrow = nrow(x_mat), ncol = category_number)
P
P[i,j] = exp(x_mat[i,]%*%(parm[,j]))/(1 + sum(exp(x_mat[i,]%*%parm)))
P[i,j]
exp(x_mat[i,]%*%(parm[,j]))
(1 + sum(exp(x_mat[i,]%*%parm)))
(x_mat[i,]%*%parm)
(x_mat[i,]%*%(parm[,j])
(x_mat[i,]%*%(parm[,j]))
(x_mat[i,]%*%(parm[,j]))
)
(x_mat[i,]%*%(parm[,j]))
j = m
j
P[i,j] = 1/(1 + sum(exp(x_mat[i,]%*%parm)))
P[i,j]
x_mat%*%parm
exp(x_mat%*%parm)
exp(x_mat%*%parm)/(rowsum(exp(x_mat%*%parm)+1))
(rowsum(exp(x_mat%*%parm)+1))
exp(x_mat%*%parm)
exp(x_mat%*%parm)+1
rowsum(exp(x_mat%*%parm)+1)
rowSum(exp(x_mat%*%parm)+1)
exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
(rowSums(exp(x_mat%*%parm)+1))
exp(x_mat%*%parm)
(rowSums(exp(x_mat%*%parm)+1))
4.85/11.709
exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
P = cbind(P,1/(rowSums(exp(x_mat%*%parm)+1)))
P
rowSums(P)
rowSums(P)
exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
1/(rowSums(exp(x_mat%*%parm)+1))
1/(rowSums(exp(x_mat%*%parm)+1)) +  exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
1/(rowSums(exp(x_mat%*%parm)+1))
exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
1/(rowSums(exp(x_mat%*%parm)+1)) +  exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
sum(exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1)))
sum(exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1)))
rowSums(exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1)))
1/(rowSums(exp(x_mat%*%parm)+1)) + rowSums(exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1)))
rowSums(exp(x_mat%*%parm)+1)
exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
exp(x_mat%*%parm)
t1 = exp(x_mat%*%parm)
t2 = (rowSums(exp(x_mat%*%parm)+1))
t1[150,]/t2[150]
exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
t1[150,]/t2[150]
t3 = 1/(rowSums(exp(x_mat%*%parm)+1))
t3
t1[150,]/t2[150] + t3[150]
t3[150]
t1[150,]/t2[150]
sum(t1[150,]/t2[150]) + t3[150]
t1[150,]
t1 = exp(x_mat%*%parm)
t2 = (rowSums(exp(x_mat%*%parm))+1)
t3 = 1/(rowSums(exp(x_mat%*%parm))+1)
t1[150,]/t2[150] + t3[150]
t3[150]
sum(t1[150,]/t2[150]) + t3[150]
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm)+1))
P = cbind(P,1/(rowSums(exp(x_mat%*%parm)+1)))
rowSums(P)
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm))+1)
P = cbind(P,1/(rowSums(exp(x_mat%*%parm))+1))
rowSums(P)
if(rowSums(P)!=1)
stop("false P")
rowSums(P)!=1
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm))+1)
P = cbind(P,1/(rowSums(exp(x_mat%*%parm))+1))
if(rowSums(P)!=1)
stop("false P")
rowSums(P)!=1
rowSums(P)
setwd("C:/Users/linzh/Desktop/pmd/heart disease")
library(dplyr)
################################### data prepare
clev_raw <- read.table('processed.cleveland.data',sep = ',')
colnames(clev_raw) <- c("age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"num")
View(clev_raw)
setwd("C:/Users/linzh/Desktop/pmd/heart disease")
################################### data prepare
clev_raw <- read.table('processed.cleveland.data',sep = ',')
colnames(clev_raw) <- c("age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"num")
View(clev_raw)
dat <- clev_raw[1:300,]
unique(dat$num)
make.data.equal.groups(dat, 10,category_name=c(1,2,3,4),categor_column = 'num')
g = make.data.equal.groups(dat, 10,category_name=c(1,2,3,4),categor_column = 'num')
category_name=c(1,2,3,4)
categor_column = 'num'
n = nrow(dat)
group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
groups_num = 30
n = nrow(dat)
group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
groups_number = 30
n = nrow(dat)
group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
ss
for (i in 1:groups_number) {
group[[i]] = dat[ss==i,]
expr = paste(categor_column)
out[i,1] = nrow(group[[i]][which(group[[i]][,expr]==category_name[1]),])
out[i,2] = nrow(group[[i]][which(group[[i]][,expr]==category_name[2]),])
out[i,3] = nrow(group[[i]][which(group[[i]][,expr]==category_name[3]),])
}
groups[[1]]
group[[1]]
g = make.data.equal.groups(dat, 10,category_name=c(1,2,3,4),categor_column = 'num')
dat
g = make.data.equal.groups(dat, 30,category_name=c(1,2,3,4),categor_column = 'num')
g = make.data.equal.groups(dat, 30,category_name=c(1,2,3,4),categor_column = 'num')
category_name=c(1,2,3,4)
categor_column = 'num'
n = nrow(dat)
n
group = list()
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
out
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
for (i in 1:groups_number) {
group[[i]] = dat[ss==i,]
expr = paste(categor_column)
out[i,1] = nrow(group[[i]][which(group[[i]][,expr]==category_name[1]),])
out[i,2] = nrow(group[[i]][which(group[[i]][,expr]==category_name[2]),])
out[i,3] = nrow(group[[i]][which(group[[i]][,expr]==category_name[3]),])
}
out
length(category_name)
n = nrow(dat)
group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
for (i in 1:groups_number) {
group[[i]] = dat[ss==i,]
expr = paste(categor_column)
for(j in 1:length(category_name))
out[i,j] = nrow(group[[i]][which(group[[i]][,expr]==category_name[j]),])
}
return(list(group,out))
out
make.data.equal.groups = function(dat, groups_number,category_name=c("setosa","versicolor","virginica"),categor_column = 'Species'){
n = nrow(dat)
group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
for (i in 1:groups_number) {
group[[i]] = dat[ss==i,]
expr = paste(categor_column)
for(j in 1:length(category_name))
out[i,j] = nrow(group[[i]][which(group[[i]][,expr]==category_name[j]),])
}
return(list(group,out))
}
g = make.data.equal.groups(dat, 30,category_name=c(1,2,3,4),categor_column = 'num')
g
View(clev_raw)
g[1]
g[1][,1:4]
dat = dat[,c("oldpeak","slope","chole","age","trestbps","num")]
library(dplyr)
dat = dat %>% select(oldpeak,slope,chole,age,trestbps,num)
dat = dat %>% select(oldpeak,slope,chol,age,trestbps,num)
################################### data prepare
clev_raw <- read.table('processed.cleveland.data',sep = ',')
colnames(clev_raw) <- c("age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"num")
dat <- clev_raw[1:300,]
dat = dat %>% select(oldpeak,slope,chol,age,trestbps,num)
#oldpeak,slope,chole,age,trestbps
g = make.data.equal.groups(dat, 30,category_name=c(1,2,3,4),categor_column = 'num')
unique(dat$num)
#oldpeak,slope,chole,age,trestbps
res = make.data.equal.groups(dat, 30,category_name=c(0,1,2,3,4),categor_column = 'num')
groups = res[[1]]
count_result = res[[2]]
category_number = 5
groups[[1]]
####################################### Using groups to analysis likelihoods
point.loglik.calcu = function(pp,count_result){
#browser()
res = pmd(pp)
l.vec = compute_l.vec(count_result)
l.vec = paste(l.vec,collapse = ",")
expr0 = "res["
expr = paste0(expr0,l.vec,"]")
likel = eval(parse(text=expr))
log_lik = log(likel)
#browser()
return(log_lik)
}
toltal.loglik.calcu = function(parm,result_mat = count_result,group = groups,cat_number = category_number,covariate_num=4) {
minus_log_lik = 0
for (i in 1:nrow(result_mat)) {
x = group[[i]]
x_mat = x[,1:covariate_num]
n = nrow(x)
result = result_mat[i,]
P = cal_pmatrix(parm, x_mat, cat_number)
minus_log_lik = minus_log_lik - point.loglik.calcu(P,result)
#browser()
}
#browser()
return(minus_log_lik)
}
dat <- clev_raw[1:300,]
dat = dat %>% select(oldpeak,slope,chol,age,num)
dat
cal_pmatrix(parm, groups[[1]], category_number)
res = make.data.equal.groups(dat, 30,category_name=c(0,1,2,3,4),categor_column = 'num')
groups = res[[1]]
count_result = res[[2]]
category_number = 5
cal_pmatrix(parm, groups[[1]], category_number)
category_number = 5
cal_pmatrix(parm, groups[[1]], category_number)
category_number
cal_pmatrix(parm, groups[[1]], category_number=5)
groups[[1]]
#setwd("C:/Users/linzh/Desktop/pmd/heart disease")
library(dplyr)
dyn.load("functions.so")
source('myfunctions.R')
################################### data prepare
clev_raw <- read.table('processed.cleveland.data',sep = ',')
colnames(clev_raw) <- c("age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"num")
dat <- clev_raw[1:300,]
dat = dat %>% select(oldpeak,slope,chol,age,num)
cov_num = 4
res = make.data.equal.groups(dat, 30,category_name=c(0,1,2,3,4),categor_column = 'num')
groups = res[[1]]
count_result = res[[2]]
category_number = 5
groups[[1]]
make.data.equal.groups = function(dat, groups_number,category_name=c("setosa","versicolor","virginica"),categor_column = 'Species'){
n = nrow(dat)
group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
for (i in 1:groups_number) {
group[[i]] = dat[ss==i,-category_name]
expr = paste(categor_column)
for(j in 1:length(category_name))
out[i,j] = nrow(group[[i]][which(group[[i]][,expr]==category_name[j]),])
}
return(list(group,out))
}
res = make.data.equal.groups(dat, 30,category_name=c(0,1,2,3,4),categor_column = 'num')
groups = res[[1]]
make.data.equal.groups = function(dat, groups_number,category_name=c("setosa","versicolor","virginica"),categor_column = 'Species'){
n = nrow(dat)
group = list()
if(n %% groups_number != 0)
stop("invalid number for grouping.")
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
for (i in 1:groups_number) {
group[[i]] = dat[ss==i,c(-category_name)]
expr = paste(categor_column)
for(j in 1:length(category_name))
out[i,j] = nrow(group[[i]][which(group[[i]][,expr]==category_name[j]),])
}
return(list(group,out))
}
dat <- clev_raw[1:300,]
dat = dat %>% select(oldpeak,slope,chol,age,num)
cov_num = 4
res = make.data.equal.groups(dat, 30,category_name=c(0,1,2,3,4),categor_column = 'num')
dat
n = nrow(dat)
group = list()
out = matrix(NA,nrow = groups_number,ncol = length(category_name))
ss <- sample(1:groups_number,size=n,replace=TRUE,prob=rep(1/groups_number,groups_number))
groups_number
group[[i]] = dat[ss==i,]
dat[ss==i,,-category_name]
category_name
category_column
category_column'num'
category_column='num'
dat[ss==i,,-category_column]
category_column
dat[ss==i,,c(-category_column)]
i
ss
dat[ss==i,c(-category_column)]
dat[ss==i,'num']
dat[ss==i,-'num']
dat[ss==i,-c('num')]
dat[ss==i,c(-'num')]
parm
########################################### optimize likelihood
parm=rep(0.02,5*5) #5 categories, 5 covariates
parm
x_mat = groups[[1]]
category_number
x_mat = as.matrix(x_mat)
n = ncol(x_mat)
m = category_number
parm = matrix(parm,n,m-1)
########################################### optimize likelihood
parm=rep(0.02,5*4) #5 categories, 5 covariates
x_mat = as.matrix(x_mat)
n = ncol(x_mat)
m = category_number
parm = matrix(parm,n,m-1)
P = matrix(0, nrow = nrow(x_mat), ncol = category_number)
P
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm))+1)
P = cbind(P,1/(rowSums(exp(x_mat%*%parm))+1))
P
rowSum(P)
rowSums(P)
groups[[1]]
x_mat = groups[[1]]
x_mat
cal_pmatrix(parm,x_mat,5)
x_mat = as.matrix(x_mat)
n = ncol(x_mat)
m = category_number
parm = matrix(parm,n,m-1)
P = matrix(0, nrow = nrow(x_mat), ncol = category_number)
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm))+1)
P = cbind(P,1/(rowSums(exp(x_mat%*%parm))+1))
P
cal_pmatrix(parm,x_mat,5)
cal_pmatrix(parm,x_mat,5)
cal_pmatrix(parm,x_mat,5)
cal_pmatrix(parm,x_mat,5)
########################################### optimize likelihood
parm=rep(0.02,4*4) #5 categories, 4 covariates
cal_pmatrix(parm,groups[[2]],5)
groups[[2]]
cal_pmatrix(parm,groups[[2]],5)
x_mat = groups[[2]]
x_mat = as.matrix(x_mat)
n = ncol(x_mat)
m = category_number
parm = matrix(parm,x_matn,m-1)
parm = matrix(parm,n,m-1)
cal_pmatrix = function(parm, x_mat, category_number){
x_mat = as.matrix(x_mat)
n = ncol(x_mat)
m = category_number
parm = matrix(parm,n,m-1)
P = matrix(0, nrow = nrow(x_mat), ncol = category_number)
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm))+1)
P = cbind(P,1/(rowSums(exp(x_mat%*%parm))+1))
return(P)
}
cal_pmatrix(parm,groups[[2]],5)
cal_pmatrix(parm,groups[[3]],5)
parm
########################################### optimize likelihood
parm=rep(0.02,4*4) #5 categories, 4 covariates
cal_pmatrix(parm,groups[[3]],5)
parm
x_mat
n = ncol(x_mat)
m = category_number
parm = matrix(parm,n,m-1)
n
x_mat
x_mat = x_mat[,1:4]
x_mat = as.matrix(x_mat)
n = ncol(x_mat)
m = category_number
parm = matrix(parm,n,m-1)
P = matrix(0, nrow = nrow(x_mat), ncol = category_number)
P = exp(x_mat%*%parm)/(rowSums(exp(x_mat%*%parm))+1)
P = cbind(P,1/(rowSums(exp(x_mat%*%parm))+1))
P
x_mat = groups[[5]]
x_mat = x_mat[,1:4]
cal_pmatrix(parm,x_mat = ,5)
cal_pmatrix(parm,x_mat,5)
parm
cal_pmatrix(parm,x_mat,5)
